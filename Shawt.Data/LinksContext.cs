// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Shawt.Data;

public partial class LinksContext : DbContext
{
    public LinksContext(DbContextOptions<LinksContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ApplicationUsers> ApplicationUsers { get; set; }

    public virtual DbSet<Link> Link { get; set; }

    public virtual DbSet<Log> Log { get; set; }

    public virtual DbSet<RateLimitCounters> RateLimitCounters { get; set; }

    public virtual DbSet<RateLimitRules> RateLimitRules { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .HasPostgresEnum("auth", "aal_level", new[] { "aal1", "aal2", "aal3" })
            .HasPostgresEnum("auth", "code_challenge_method", new[] { "s256", "plain" })
            .HasPostgresEnum("auth", "factor_status", new[] { "unverified", "verified" })
            .HasPostgresEnum("auth", "factor_type", new[] { "totp", "webauthn", "phone" })
            .HasPostgresEnum("auth", "one_time_token_type", new[] { "confirmation_token", "reauthentication_token", "recovery_token", "email_change_token_new", "email_change_token_current", "phone_change_token" })
            .HasPostgresEnum("pgsodium", "key_status", new[] { "default", "valid", "invalid", "expired" })
            .HasPostgresEnum("pgsodium", "key_type", new[] { "aead-ietf", "aead-det", "hmacsha512", "hmacsha256", "auth", "shorthash", "generichash", "kdf", "secretbox", "secretstream", "stream_xchacha20" })
            .HasPostgresEnum("realtime", "action", new[] { "INSERT", "UPDATE", "DELETE", "TRUNCATE", "ERROR" })
            .HasPostgresEnum("realtime", "equality_op", new[] { "eq", "neq", "lt", "lte", "gt", "gte", "in" })
            .HasPostgresExtension("extensions", "pg_stat_statements")
            .HasPostgresExtension("extensions", "pgcrypto")
            .HasPostgresExtension("extensions", "pgjwt")
            .HasPostgresExtension("extensions", "uuid-ossp")
            .HasPostgresExtension("graphql", "pg_graphql")
            .HasPostgresExtension("pgsodium", "pgsodium")
            .HasPostgresExtension("vault", "supabase_vault");

        modelBuilder.Entity<ApplicationUsers>(entity =>
        {
            entity.HasKey(e => new { e.ApplicationId, e.UserName }).HasName("applicationusers_pkey");

            entity.Property(e => e.UserName).HasMaxLength(100);
        });

        modelBuilder.Entity<Link>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("link_pkey");

            entity.Property(e => e.Id).HasDefaultValueSql("nextval('link_id_seq'::regclass)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CreatedOn).HasColumnType("timestamp(6) without time zone");
            entity.Property(e => e.OriginalLink).IsRequired();
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("log_pkey");

            entity.Property(e => e.Id).HasDefaultValueSql("uuid_generate_v4()");
            entity.Property(e => e.Browser).HasMaxLength(100);
            entity.Property(e => e.Device).HasMaxLength(100);
            entity.Property(e => e.IpAddress).HasMaxLength(50);
            entity.Property(e => e.Os).HasMaxLength(50);
            entity.Property(e => e.Timestamp).HasColumnType("timestamp(6) without time zone");

            entity.HasOne(d => d.Link).WithMany(p => p.Log)
                .HasForeignKey(d => d.LinkId)
                .HasConstraintName("fk_log_link");
        });

        modelBuilder.Entity<RateLimitCounters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ratelimitcounters_pkey");

            entity.ToTable("RateLimitCounters", "RateLimiting");

            entity.Property(e => e.Id).HasMaxLength(200);
            entity.Property(e => e.Timestamp).HasColumnType("timestamp(6) without time zone");
        });

        modelBuilder.Entity<RateLimitRules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ratelimitrules_pkey");

            entity.ToTable("RateLimitRules", "RateLimiting");

            entity.Property(e => e.Id).HasDefaultValueSql("nextval('\"RateLimiting\".ratelimitrules_id_seq'::regclass)");
            entity.Property(e => e.ClientId)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Endpoint).IsRequired();
            entity.Property(e => e.Period)
                .IsRequired()
                .HasMaxLength(10);
        });
        modelBuilder.HasSequence<int>("seq_schema_version", "graphql").IsCyclic();

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}